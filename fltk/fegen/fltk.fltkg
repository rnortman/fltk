grammar := (rules:rule | vars:var)+;
rule := name:identifier , ("(" , options:rule_options , ")")? , ":=" , !alternatives , ";" ,;
alternatives := alternative:items , ("|" , alternative:items)* ;
items := items:item? , ((concat_no_ws:"." | concat:",") , items:item)* , (concat_no_ws:"." | concat:",")? ,;
item := (label:identifier . ":")? . disposition? . term . quantifier? ,;
term := invocation | identifier | literal | "/" . regex:raw_string . "/" | "(" , !alternatives , ")";
disposition := suppress:"%" | include:"$" | inline:"!";
quantifier := optional:"?" | one_or_more:"+" | zero_or_more:"*";
invocation := method:identifier . "(" , expression? , ")";
expression := add:(lhs:expression , '+' , rhs:expression) | invocation | identifier;
var := "let" , identifier , ":" , "Stack" , "[" , "String" , "]" , (":=", init_value:literal)? , ";";
identifier := /[_a-z][_a-z0-9]*/;
raw_string := /([^\/\n\\]|\\.)+/;
literal := /("([^"\n\\]|\\.)+"|'([^'\n\\]|\\.)+')/;
